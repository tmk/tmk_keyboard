/** \file
 *
 *  This file contains special DoxyGen information for the generation of the main page and other special
 *  documentation pages. It is not a project source file.
 */

/** \mainpage Mass Storage Device Demo
 *
 *  \section Sec_Compat Demo Compatibility:
 *
 *  The following list indicates what microcontrollers are compatible with this demo.
 *
 *  \li Series 7 USB AVRs (AT90USBxxx7)
 *  \li Series 6 USB AVRs (AT90USBxxx6)
 *  \li Series 4 USB AVRs (ATMEGAxxU4)
 *  \li Series 2 USB AVRs (AT90USBxx2, ATMEGAxxU2)
 *  \li Series AU XMEGA AVRs (ATXMEGAxxxAxU)
 *  \li Series B XMEGA AVRs (ATXMEGAxxxBxU)
 *  \li Series C XMEGA AVRs (ATXMEGAxxxCxU)
 *
 *  \section Sec_Info USB Information:
 *
 *  The following table gives a rundown of the USB utilization of this demo.
 *
 *  <table>
 *   <tr>
 *    <td><b>USB Mode:</b></td>
 *    <td>Device</td>
 *   </tr>
 *   <tr>
 *    <td><b>USB Class:</b></td>
 *    <td>Mass Storage Device</td>
 *   </tr>
 *   <tr>
 *    <td><b>USB Subclass:</b></td>
 *    <td>Bulk-Only Transport</td>
 *   </tr>
 *   <tr>
 *    <td><b>Relevant Standards:</b></td>
 *    <td>USBIF Mass Storage Standard \n
 *        USB Bulk-Only Transport Standard \n
 *        SCSI Primary Commands Specification \n
 *        SCSI Block Commands Specification</td>
 *   </tr>
 *   <tr>
 *    <td><b>Supported USB Speeds:</b></td>
 *    <td>Full Speed Mode</td>
 *   </tr>
 *  </table>
 *
 *  \section Sec_Description Project Description:
 *
 *  Mass Storage device demonstration application. This gives a simple
 *  reference application for implementing a USB Mass Storage device using
 *  the basic USB UFI drivers in all modern OSes (i.e. no special drivers
 *  required).
 *
 *  On start-up the system will automatically enumerate and function as an
 *  external mass storage device which may be formatted and used in the same
 *  manner as commercial USB Mass Storage devices.
 *
 *  You will need to format the mass storage drive upon first run of this
 *  demonstration - as the device acts only as a data block transport between
 *  the host and the storage media, it does not matter what file system is used,
 *  as the data interpretation is performed by the host and not the USB device.
 *
 *  This demo is not restricted to only a single LUN (logical disk); by changing
 *  the TOTAL_LUNS value in DataflashManager.h, any number of LUNs can be used
 *  (from 1 to 255), with each LUN being allocated an equal portion of the available
 *  Dataflash memory.
 *
 *  The USB control endpoint is managed entirely by the library using endpoint
 *  interrupts, as the INTERRUPT_CONTROL_ENDPOINT option is enabled. This allows for
 *  the host to reset the Mass Storage device state during long transfers without
 *  the need for complicated polling logic.
 *
 *  \section Sec_Options Project Options
 *
 *  The following defines can be found in this demo, which can control the demo behaviour when defined, or changed in value.
 *
 *  <table>
 *   <tr>
 *    <th><b>Define Name:</b></th>
 *    <th><b>Location:</b></th>
 *    <th><b>Description:</b></th>
 *   </tr>
 *   <tr>
 *    <td>TOTAL_LUNS</td>
 *    <td>AppConfig.h</td>
 *    <td>Total number of Logical Units (drives) in the device. The total device capacity is shared equally between each drive -
 *        this can be set to any positive non-zero amount.</td>
 *   </tr>
 *   <tr>
 *    <td>DISK_READ_ONLY</td>
 *    <td>AppConfig.h</td>
 *    <td>Configuration define, indicating if the disk should be write protected or not.</td>
 *   </tr>
 *  </table>
 */

