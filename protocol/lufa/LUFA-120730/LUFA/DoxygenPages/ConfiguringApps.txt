/** \file
 *
 *  This file contains special DoxyGen information for the generation of the main page and other special
 *  documentation pages. It is not a project source file.
 */

/** \page Page_ConfiguringApps Configuring the Demos, Bootloaders and Projects
 *
 *  If the target microcontroller model, architecture, clock speed, board or other settings are different from the current
 *  settings, they must be changed and the project recompiled from the source code before being programmed into the microcontroller.
 *  Most project configuration options are located in the <tt>makefile</tt> build script inside each LUFA application's folder,
 *  however some demo or application-specific configuration settings are located in one or more of the source files of the project.
 *  See each project's individual documentation for application-specific configuration values.
 *
 *  Each project "makefile" contains all the script and configuration data required to compile each project. When opened with
 *  any regular basic text editor such as Notepad or WordPad (ensure that the save format is a pure ASCII text format) the
 *  build configuration settings may be altered.
 *
 *  \see \ref Page_BuildSystem for information on the LUFA build system.
 *
 *  \section Sec_AppConfigParams The Default Application Template
 *
 *  Below is a copy of the default LUFA application makefile, which can be used as a template for each application.
 *
 *  \verbinclude makefile_template
 *
 *  Inside each makefile, a number of configuration variables are listed with the syntax "<VARIABLE NAME> = <VALUE>". For
 *  each application, the important standard variables which should be altered are:
 *
 *    - <b>MCU</b>, the target processor model
 *    - <b>ARCH</b>, the target microcontroller architecture
 *    - <b>BOARD</b>, the target board hardware
 *    - <b>F_CPU</b>, the target CPU master clock frequency, after any prescaling
 *    - <b>F_USB</b>, the target raw input clock to the USB module of the processor
 *    - <b>OPTIMIZATION</b>, the level of optimization to compile with
 *    - <b>TARGET</b>, the name of the target output binary and other files
 *    - <b>SRC</b>, the list of source files to compile/assemble/link
 *    - <b>LUFA_PATH</b>, the path to the LUFA library core source code
 *    - <b>CC_FLAGS</b>, the common command line flags to pass to the C/C++ compiler, assembler and linker
 *    - <b>LD_FLAGS</b>, the command line flags to pass to the linker
 *
 *  These values should be changed to reflect the build hardware.
 *
 *  \subsection SSec_MCU The MCU Parameter
 *  This parameter indicates the target microcontroller model for the compiled application. This should be set to the model of the target
 *  microcontroller (such as the AT90USB1287, or the ATMEGA32U4), in all lower-case (e.g. "at90usb1287"). Note that not all demos support all the
 *  microcontroller models and architectures, as they may make use of peripherals or modes only present in some devices.
 *
 *  For supported processor models, see \ref Page_DeviceSupport.
 *
 *  \subsection SSec_ARCH The ARCH Parameter
 *  This parameter indicates the target microcontroller architecture the library is to be compiled for. Different microcontroller
 *  architectures require different source files to be compiled into the final binary, and so this option must be set to the correct
 *  architecture for the selected platform.
 *
 *  For supported processor architectures, see \ref Page_DeviceSupport.
 *
 *  \subsection SSec_BOARD The BOARD Parameter
 *  This parameter indicates the target board hardware for the compiled application. Some LUFA library drivers are board-specific,
 *  such as the LED driver, and the library needs to know the layout of the target board. If you are using one of the board models listed
 *  on the main library page, change this parameter to the board name in all UPPER-case.
 *
 *  If you are not using any board-specific drivers in the LUFA library, or you are using a custom board layout, change this to read
 *  "USER" (no quotes) instead of a standard board name. If the USER board type is selected and the application makes use of one or more
 *  board-specific hardware drivers inside the LUFA library, then the appropriate stub drives files should be copied from the \c /CodeTemplates/DriverStubs/
 *  directory into a /Board/ folder inside the application directory, and the stub driver completed with the appropriate code to drive the
 *  custom board's hardware.
 *
 *  For boards with built in hardware driver support within the LUFA library, see \ref Page_DeviceSupport.
 *
 *  \subsection SSec_F_CPU The F_CPU Parameter
 *  This parameter indicates the target microcontroller's main CPU clock frequency, in Hz. This is used by many libraries (and applications) for
 *  timing related purposes, and should reflect the actual CPU speed after any prescaling or adjustments are performed.
 *
 *  \subsection SSec_F_USB The F_USB Parameter
 *  This parameter indicates the raw input clock frequency to the USB module within the microcontroller in Hz. This may be very different on some platforms
 *  to the main CPU clock or other peripheral/bus clocks.
 *
 *  \subsection SSec_OPTIMIZATION The OPTIMIZATION Parameter
 *  This parameter indicates the level of optimization to use when compiling the application. This will allow you to compile with an optimization level
 *  supported by GCC, from <tt>0</tt> (no optimization) to <tt>3</tt> (fastest runtime optimization) or <tt>s</tt> (smallest size).
 *
 *  \subsection SSec_TARGET The TARGET Parameter
 *  This parameter indicates the application target name, which is used as the base filename for the build binary and debugging files. This will be the
 *  name of the output files once linked together into the final application, ready to load into the target.
 *
 *  \subsection SSec_SRC The SRC Parameter
 *  This parameter indicates the source files used to compile the application, as a list of C (<tt>*.c</tt>), C++ (<tt>*.cpp</tt>) and Assembly (<tt>*.S</tt>) files. Note that
 *  all assembly files must end in a <b>capital</b> .S extension, as lowercase .s files are reserved for GCC intermediate files.
 *
 *  \subsection SSec_LUFA_PATH The LUFA_PATH Parameter
 *  As each LUFA program requires the LUFA library source code to compile correctly, the application must know where the LUFA library is located. This
 *  value specifies the path to the LUFA library core. This path may be relative or absolute, however note than even under Windows based systems the
 *  forward-slash (/) path seperator must be used.
 *
 *  \subsection SSec_CC_FLAGS The CC_FLAGS Parameter
 *  This parameter lists the compiler flags passed to the C/C++ compiler, the assembler and the linker. These are used as-is directly to GCC and thus
 *  must match GCC's command line options as given in the GCC manual. This variable may be used to define tokens directly on the command line, enable or
 *  disable warnings, adjust the target-specific tuning parameters or other options.
 *
 *  \subsection SSec_LD_FLAGS The LD_FLAGS Parameter
 *  This parameter lists the linker flags passed exclusively to the linker. These are used as-is directly to GCC and thus must match GCC's command line
 *  linker options as given in the GCC manual. This variable may be used to create or relocate custom data sections, or enable linker specific behaviors.
 */
